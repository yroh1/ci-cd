node {
  def commit_id
   stage('Checkout') {
     checkout scm
     sh "git rev-parse --short HEAD > .git/commit-id"
     commit_id = readFile('.git/commit-id').trim()
   }
   stage('Build') {
       dir("advance/workshop/talkshow"){
         sh '''
         pip install -e '.[dev]'
         pip install email_validator
         '''
         sh '''
         flask adduser -u admin -p 1234
         flask flask addevent -n "Flask Conf" -d "2018-08-25"
         '''
       }
    }
   stage('test') {
       dir("advance/workshop/talkshow"){
        sh 'py.test  -v --cov-config .coveragerc --cov=talkshow -l --tb=short --maxfail=1 tests/'
       }
    }
   stage('Serve') {
    dir("advance/workshop/talkshow"){
        sh 'flask run'
       }
     }
   stage('docker build/push') {
     dir("advance/workshop/talkshow") {
      def flask_image = docker.build("michabi/jenkins-lab:${commit_id}", "--build-args USERNAME=${env.BUILD_USER_ID}, '.'")
      docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
        flask_image.push()
      }
     }
   }

   stage('docker run') {
     flask_image.run()
   }
}